package tpp;

import java.util.*;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.*;

public class TPP {

	public static int PARTS_NUM = 4;
	// try different value to get the best performance.

	public static int hashFun(String nodeName) {
		return nodeName.hashCode() % PARTS_NUM;
	}

	public static class TppMapper extends Mapper<LongWritable, Text, Text, Text> {

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String[] strs = value.toString().split(" ");
			assert (strs.length == 2);
			String u = strs[0];
			String v = strs[1];
			int hu = hashFun(u);
			int hv = hashFun(v);
			if (PARTS_NUM == 1) {
				context.write(new Text("0%0"), new Text(u + "#" + v));
			}
			for (int a = 0; a <= PARTS_NUM - 2; a++) {
				for (int b = a + 1; b <= PARTS_NUM - 1; b++) {
					if ((hu == a || hu == b) && (hv == a || hv == b)) {
						// we use different symbols to mark them.
						context.write(new Text(a + "%" + b), new Text(u + "#" + v));
					}
				}
			}
			if (hu != hv) {
				for (int a = 0; a <= PARTS_NUM - 3; a++) {
					for (int b = a + 1; b <= PARTS_NUM - 2; b++) {
						for (int c = b + 1; c <= PARTS_NUM - 1; c++) {
							if ((hu == a || hu == b || hu == c) && (hv == a || hv == b || hv == c)) {
								context.write(new Text(a + "%" + b + "%" + c), new Text(u + "#" + v));
							}
						}
					}
				}
			}
		}
	}

	public static class TppReducer extends Reducer<Text, Text, Text, IntWritable> {
		
		private static int num = 0;
		private static int weakNum = 0;
		
		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
			Map<String, Set<String>> G = new TreeMap<String, Set<String>>();
			for (Text val : values) {
				String[] strs = val.toString().split("#");
				assert (strs.length == 2);
				String u = strs[0];
				String v = strs[1];
				if (!G.containsKey(u)) {
					G.put(u, new TreeSet<String>());
				}
				if (!G.containsKey(v)) {
					G.put(v, new TreeSet<String>());
				}
				if (u.compareTo(v) < 0) {
					G.get(u).add(v);
				} else if (u.compareTo(v) > 0) {
					G.get(v).add(u);
				} else {
					System.out.println("single circle");
				}
			}
			int hs, ht, hv;//, num = 0, weakNum = 0;
			for (Map.Entry<String, Set<String>> entry : G.entrySet()) {
				hs = hashFun(entry.getKey());
				for (String t : entry.getValue()) {
					ht = hashFun(t);
					Set<String> intersection = new TreeSet<String>(entry.getValue());
					intersection.retainAll(G.get(t));
					for (String v : intersection) {
						hv = hashFun(v);
						if (hs == ht && ht == hv) {
							weakNum++;
							context.write(new Text(entry.getKey()+"#"+t+"#"+v),new IntWritable(3));
						} else {
							num++;
							context.write(new Text(entry.getKey()+"#"+t+"#"+v),new IntWritable(1));
						}
					}
				}
			}
			/*
			num += p.num;
			weakNum += p.weakNum;
			*/
			/*
			Configuration conf = context.getConfiguration();
			int tempNum = conf.getInt("num", 0) + p.num;
			conf.setInt("num", tempNum);
			int tempWeakNum = conf.getInt("weakNum", 0) + p.weakNum;
			conf.setInt("weakNum", tempWeakNum);
			*/
		}

		public void cleanup(Context context) throws IOException, InterruptedException {
			/*
			Configuration conf = context.getConfiguration();
			int num = conf.getInt("num", 0);
			int weakNum = conf.getInt("weakNum", 0);
			context.write(new Text("Nums:"), new IntWritable(num));
			context.write(new Text("WeakNums:"), new IntWritable(weakNum));
			assert (weakNum % (PARTS_NUM - 1) == 0);
			*/
			context.write(new Text("Nums:"), new IntWritable(num));
			context.write(new Text("WeakNums:"), new IntWritable(weakNum));
			if (PARTS_NUM == 1) {
				int trianglesNum = num + weakNum;
				context.write(new Text("Triangle Nums:"), new IntWritable(trianglesNum));
			} else {
				int trianglesNum = num + weakNum / (PARTS_NUM - 1);
				context.write(new Text("Triangle Nums:"), new IntWritable(trianglesNum));
			}
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		//conf.setInt("num", 0);
		//conf.setInt("weakNum", 0);
		Job job1 = Job.getInstance(conf, "TPP");
		job1.setJarByClass(TPP.class);
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(Text.class);
		job1.setMapperClass(TppMapper.class);
		job1.setReducerClass(TppReducer.class);
		FileInputFormat.addInputPath(job1, new Path(args[0]));
		FileOutputFormat.setOutputPath(job1, new Path(args[1]));
		job1.waitForCompletion(true);
	}

}