package triangle;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class GraphBuilder {

	private static HashMap<String, Integer> degree_map = new HashMap<String, Integer>();

	class ID implements Comparable<ID> {
		public String str = null;
		public int deg = 0;

		public ID(String id) {
			str = id;
			deg = degree_map.get(id);
		}

		public int compareTo(ID id) {
			if (id.deg > deg)
				return 1;
			else if (id.deg == deg)
				return 0;
			else
				return -1;
		}
	}
	
	public static class GraphBuilderMapper extends Mapper<LongWritable, Text, Text, Text> {

		private static Path localFiles = null;

		public void setup(Context context) throws IOException, InterruptedException {
			URI[] cacheFile = context.getCacheFiles();
			localFiles = new Path(cacheFile[0]);
			String line;
			BufferedReader br = new BufferedReader(new FileReader(localFiles.toString()));
			while ((line = br.readLine()) != null) {
				String[] strs = line.split("#");
				if (strs.length != 2) {
					System.err.println(line);
				}
				else {
					degree_map.put(strs[0], Integer.parseInt(strs[1]));
				}
			}
			System.out.println("setup load degree map finished!");
		}

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String[] strs = value.toString().split(" ");
			if (strs.length != 2) {
				System.out.println("illegal input");
			}
			ID id1 = new ID(strs[0]);
			ID id2 = new ID(strs[1]);

			if (id1.compareTo(id2) > 0) {
				context.write(new Text(id2.str), new Text(id1.str));
			} else if (id1.compareTo(id2) < 0) {
				context.write(new Text(id1.str), new Text(id2.str));
			} else {
				System.out.println("single circle");
			}
		}
	}

	public static class GraphBuilderReducer extends Reducer<Text, Text, Text, Text> {
		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
			Set<ID> neigh = new TreeSet<ID>();
			for (Text value : values) {
				neigh.add(new ID(value.toString()));
			}
			Iterator<ID> ite = neigh.iterator();
			StringBuilder str = new StringBuilder();
			while (ite.hasNext()) {
				str.append(ite.next().str);
				str.append("#");
			}
			context.write(key, new Text(str.toString()));
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job1 = Job.getInstance(conf, "Graph Builder");
		job1.addCacheFile(new Path("degree_sort.txt").toUri());
		job1.setJarByClass(GraphBuilder.class);
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(Text.class);
		job1.setMapperClass(GraphBuilderMapper.class);
		job1.setReducerClass(GraphBuilderReducer.class);
		FileInputFormat.addInputPath(job1, new Path(args[0]));
		FileOutputFormat.setOutputPath(job1, new Path(args[1]));
		job1.waitForCompletion(true);
	}
}
